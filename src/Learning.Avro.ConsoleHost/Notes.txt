================================================================================
Type Mapping
================================================================================

This page documents the type mapping behaviors and recommendations for
the Chr.Avro library:

https://engineering.chrobinson.com/dotnet-avro/internals/mapping


================================================================================
Issues
================================================================================

--------------------------------------------------------------------------------
Open
--------------------------------------------------------------------------------

*** Compatibility testing.

The first iteration failed with an error during deserialization:

  "Value was either too large or too small for a Decimal."

This occurred for both cases:

* Widget -> WidgetPrime
* WidgetPrime -> Widget

It is unclear why this is happening. The WidgetPrime has multiple changes
which make it difficult to isolate the cause.

The second iteration introduces WidgetAdd which only adds a single field
to the end of the Widget schema.

Deserializing a WidgetAdd from a serialized Widget results in:

  "Encoded integer exceeds long bounds."

Deserializing a Widget from a WidgetAdd *does* work. So forward compatibility
works in this simple case, but backward compatibility does not. Why?

The "Getting Started (Java)" article in the documentation yielded a potential
clue: Try declaring the deserializer for the target object version with the
schema from the source object version.

* This works. However, this seems like it is not a particularly dynamic
  solution. Explicit logic is required to detect and select the deserializer
  with the correct source schema for each message. Is this how this is
  intended to work (versus the deserialization engine just works it out 
  via inherent schema compatibility semantics)?

*** DateTimeOffset is always deserialized with a UTC time.

On serialization, the library uses the UtcDateTime property of the offset. Upon
deserialization, this results in a DateTimeOffset set to the UTC time with an
offset value of zero.

Serialization should respect the original DateTime Kind of the DateTimeOffset
and express it with the original offset from UTC, if applicable. It can do this
by separating treatment of DateTimeOffsets from DateTimes.

Test 1: Direct String Conversion

* Using DateTimeOffet.ToString("O") and then DateTimeOff.Parse()
  yields the expected result: The local time remains the base time
  and the original offset value is preserved.

Test 2: Avro String Schema

* Serializing and deserializing a local DateTimeOffset value yields
  a DateTimeOffset based on the UTC time and a zero offset value.

* The unit test passes because the original and deserialized values
  represent the same point in time even though they are not rendered
  in the same way. See:

  https://docs.microsoft.com/en-us/dotnet/api/system.datetimeoffset.op_equality

Reference:

BinarySerializerBuilder.cs / StringSerializerBuilderCase.BuildDelegate()

  result = Expression.PropertyOrField(result, nameof(DateTimeOffset.UtcDateTime));

BinaryDeserializerBuilder.cs / StringDeserializerBuilderCase.BuildDelegate()

  var parseDateTime = typeof(DateTime)
      .GetMethod(nameof(DateTime.Parse), new[]
      {
          typeof(string),
          typeof(IFormatProvider),
          typeof(DateTimeStyles)
      });

Note usage of the UtcDateTime property to get the value of the DateTimeOffset
instead of just using the value of the DateTimeOffset itself.

This behavior can be effectively be demonstrated with the following code:

  var loc = DateTime.Now;
  var utc = loc.ToUniversalTime();

  var dtoFromLocal = new DateTimeOffset(loc);
  var dtoFromUtc = new DateTimeOffset(utc);

Note that the local and UTC times are the same in both cases, but in the
latter case, the base DateTime value uses the UTC time and the offset value
is set to 00:00.

This raises another question about how DateTimeOffset works. If the local and
UTC times are different, how can the offset be 00:00?

Reference:

* https://docs.microsoft.com/en-us/dotnet/api/system.datetimeoffset
* https://docs.microsoft.com/en-us/dotnet/standard/datetime/instantiating-a-datetimeoffset-object

--------------------------------------------------------------------------------
Closed
--------------------------------------------------------------------------------

*** Serializer cannot be created for decimal field on record.

The logical type cannot be specified directly on the record field. The
decimal schema must be nested on the type property.
